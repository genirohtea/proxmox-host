---
- name: "Retrieve the version of the currently running kernel"
  ansible.builtin.command: uname -r
  register: kernel_version
  changed_when: false

- name: "Strip the '-pve' suffix from the kernel version"
  ansible.builtin.set_fact:
    kernel_version_num: "{{ kernel_version.stdout | replace('-pve', '') }}"

- name: "Set kernel version"
  ansible.builtin.set_fact:
    kernel_version: "{{ kernel_version.stdout }}"

- name: "Display the kernel version number"
  ansible.builtin.debug:
    var: kernel_version_num


- name: "Install the latest DKMS compatible kernel headers first"
  ansible.builtin.apt:
    update_cache: true
    pkg:
      - "proxmox-headers-{{ intel_graphics_kernel_version }}"
    state: present

- name: "Install the latest DKMS compatible kernel version"
  ansible.builtin.apt:
    update_cache: true
    pkg:
      - "proxmox-kernel-{{ intel_graphics_kernel_version }}-signed"
    state: present

- name: "Pin the current kernel version to prevent it from being updated"
  ansible.builtin.command:
    cmd: proxmox-boot-tool kernel pin {{ intel_graphics_kernel_version }}
  changed_when: false

- name: "Pin the current kernel version to prevent it from being updated"
  ansible.builtin.command:
    cmd: proxmox-boot-tool refresh
  changed_when: false

- name: "Pin the current kernel version to prevent it from being updated"
  ansible.builtin.command:
    cmd: proxmox-boot-tool kernel list
  changed_when: false
  register: proxmox_boot_tool_output

- name: "Display the proxmox-boot-tool output after pinning"
  ansible.builtin.debug:
    var: proxmox_boot_tool_output.stdout

- name: "Restart to change kernel"
  reboot:
    msg: "Force a reboot to change kernel"
    connect_timeout: 5
    reboot_timeout: 300
    pre_reboot_delay: 5
    post_reboot_delay: 30
    test_command: uptime
  when: hostvars[inventory_hostname].allow_reboot
  become: true

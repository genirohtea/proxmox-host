#!/usr/local/bin/bash
# shellcheck disable=SC2034
# Config file for spinpid2.sh, beginning version 2020-06-17, for dual fan zones.
# Minor changes 2020-08-20, but 2020-06-17 config
# is still compatible with 2020-08-20 spinpid2.sh.

# Path to ipmitool.  If you're doing VM
# you may need to add (inside quotes) the following to
# remotely execute commands.
#  -H <hostname/ip> -U <username> -P <password>
IPMITOOL=$(which ipmitool)

#################  OUTPUT SETTINGS ################

# Change to your desired log location/name or it will be put
# in the directory above (..) the one with the script.
LOG=$(dirname "${BASH_SOURCE[0]}")/../spinpid2.log

# Where do you want output to go?  Comment/uncomment (#) to select.
# First sends output to the log file AND to screen/console, good for testing.
# Second goes only to log file, no feedback if running manually, but doesn't take over console.
# In the first, if you want to append to existing log, add '-a' to the tee command.
exec > >(tee -i "$LOG") 2>&1        # Log + console, good for testing
# exec &> $LOG                      # Log only

# CPU output is sent to a separate log for interim cycles
# It can get big so turn off after testing. 1 = log cpu; anything else = don't log cpu
CPU_LOG_YES=0

# Path/name of cpu log
CPU_LOG=$(dirname "${BASH_SOURCE[0]}")/../cpu.log

#################  FAN SETTINGS ################

# Watt Spin Test Results
# Below 20% duty cycle, Supermicro starts freaking out with the duty cycle
# Sunday, May 26, 19:00:49
#                                  ___Duty%___ Curr_RPM________________________
#                         MODE     Zone0 Zone1  FANA  FANB  FAN1  FAN2  FAN3  FAN4
# Duty cycle 100%         Full       100   100  1680  2520   ---   ---   ---  4340
# Duty cycle 95%          Full        94    94  1680  2380   ---   ---   ---  4200
# Duty cycle 90%          Full        89    89  1540  2240   ---   ---   ---  4200
# Duty cycle 85%          Full        84    84  1400  2100   ---   ---   ---  4060
# Duty cycle 80%          Full        80    80  1400  2100   ---   ---   ---  3920
# Duty cycle 75%          Full        74    74  1260  1960   ---   ---   ---  3780
# Duty cycle 70%          Full        69    69  1260  1820   ---   ---   ---  3780
# Duty cycle 65%          Full        64    64  1120  1680   ---   ---   ---  3640
# Duty cycle 60%          Full        60    60  1120  1680   ---   ---   ---  3500
# Duty cycle 55%          Full        54    54   980  1540   ---   ---   ---  3360
# Duty cycle 50%          Full        49    49   840  1400   ---   ---   ---  3220
# Duty cycle 45%          Full        44    44   840  1260   ---   ---   ---  3080
# Duty cycle 40%          Full        40    40   700  1120   ---   ---   ---  2940
# Duty cycle 35%          Full        34    34   560   980   ---   ---   ---  2800
# Duty cycle 30%          Full        29    29   560   840   ---   ---   ---  2660
# Duty cycle 25%          Full        24    24   420   700   ---   ---   ---  2520
# Duty cycle 20%          Full        20    20   280   560   ---   ---   ---  2380
# Duty cycle 15%          Full       100   100   140   420   ---   ---   ---  4340
# Duty cycle 10%          Full       100   100  1680  2520   ---   ---   ---  4340



# Supermicro says:
# Zone 0 - CPU/System fans, headers with number (e.g., FAN1, FAN2, etc.)
# Zone 1 - Peripheral fans, headers with letter (e.g., FANA, FANB, etc.)
# Some want the reverse (i.e, drive cooling fans on headers FAN1-4 and
# CPU fan on FANA), so that's the default.  But you can switch to SM way.
ZONE_CPU=0
ZONE_PER=1


# Set min and max duty cycle to avoid stalling or zombie apocalypse
DUTY_CPU_MIN=5
DUTY_CPU_MAX=100
DUTY_PER_MIN=20
DUTY_PER_MAX=100

# Using spintest.sh, measure fan RPMs at 30% duty cycle and 100% duty cycle.
# RPM_CPU is for FANA if ZONE_CPU=1 or FAN4 if ZONE_CPU=0
# RPM_PER is for the other fan.
RPM_CPU_30=2660
RPM_CPU_MAX=4340
RPM_PER_30=560
RPM_PER_MAX=1680

# How should we determine what the fan duty (% of full power) is?
# Normally we want to read that from the board (HOW_DUTY=1).
# However, some dual-zone boards report incorrect fan duty,
# and then we need to assume duty is what we set last time (HOW_DUTY=0)
# (1) let the script read it
# (0 or any other value) assume it's where it was set.
HOW_DUTY=1

#################  DRIVE SETTINGS ################

SP=40   #  Setpoint mean drive temperature (C)

#  Time interval for checking drives (minutes).  Drives change
#  temperature slowly; 5 minutes is probably frequent enough.
DRIVE_T=5
# Tunable constants for drive control (see comments at end of script)
KP=4    #  Proportional tunable constant
KD=40   #  Derivative tunable constant

#################  CPU SETTINGS ################

#  Time interval for checking CPU (seconds).  1 to 12 may be appropriate
CPU_T=5

#  Reference temperature (C) for scaling CPU_DUTY (NOT a setpoint).
#  At and below this temperature, CPU will demand minimum
#  duty cycle (DUTY_CPU_MIN).
CPU_REF=54  # Integer only!
#  Scalar for scaling CPU_DUTY.
#  CPU will demand this number of percentage points in additional
#  duty cycle for each degree of temperature above CPU_REF.
CPU_SCALE=6  # Integer only!

#################  OPTIONAL ################

# If you wish to implement user-defined actions after Drives_check_adjust()
# and CPU_check_adjust(), you can define Post_DRIVES_check_adjust()
# and Post_CPU_check_adjust() here.
# For example, barbierimc set up Grafana to graph the data: https://www.ixsystems.com/community/threads/fan-scripts-for-supermicro-boards-using-pid-logic.51054/post-555603
